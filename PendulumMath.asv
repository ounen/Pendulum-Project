function xdot = PendulumMath(t,x,M,m,f,g,l);
% State Space Model Values

A = [0      1       0               0;
     0      0       -m*g/M          0;
     0      0       0               1;
     0      0       (M+m)*g/(M*l)   0];
 
B = [0; 1/M; 0; -1/(l*M)];
C = [1 0 0 0;
     0 0 1 0];
D = 0;

Q = [100    0       0      0;
     0      5     0      0;
     0      0       30     0;
     0      0       0      1]
R = 0.00001;
K = lqr(A,B,Q,R)

% User Input
thetaDes = 0;   % desired angle
xDes = 0;       % desired position
kp = 450;
ki = 0;
kd = 45;

% Get Required Error Values for PID
error = thetaDes - x(3)
errorDot = -x(4)
intError = x(5)

% PID Implementation
%F = -( kp*error + ki*intError + kd*errorDot )

% LQR Implementation
%F = -( K(1)*x(1) + K(2)*x(2) + K(3)*x(3) + K(4)*x(4) )
F = 0

% Dynamics of System
pos = x(2);
posdot = ( -m*g*sin(x(3)) + m*l*x(4)^2*sin(x(3)) + f*m*x(4)*cos(x(3)) + F )/( M + (1-cos(x(3))^2)*m );
theta = x(4);
thetadot = ( (M+m)*(g*sin(x(3)) - f*x(4)) - (l*m*x(4)^2*sin(x(3)) + F)*cos(x(3)) )/( l*(M + (1-cos(x(3))^2)*m));

% Return State Rates
xdot = [pos; posdot; theta; thetadot; error]